clear
capture log close
display "This program was last run on $S_DATE at $S_TIME"
#delimit ;

log using "C:\Users\Troy\Box Sync\_ troy's files\research\covid-19\2020-05 - ohio analysis\stata work\covid-19 ohio state all causes by place analysis - 01 - create sample data - v13 .smcl", replace ;
* read in, revise, & save datasets ;
	* deaths data ;
		* read in data ;
			import excel 
				"C:\Users\Troy\Box Sync\_ troy's files\research\_data\ohio\public health info warehouse\ohio deaths by county, year, & mmwr week (2010-2020) - v6 .xlsx" , 
				sheet("dths- st all place") firstrow allstring ;
		* drop total row ;
			drop if DeathYearYear == "Total" ;
			drop if DeathPlaceOfDeathPlaceOfDeath == "Total" ;
		* drop data later than week 40 of 2020 ;
			foreach W of numlist 41/53
				{ ;
				drop if DeathYearYear == "2020 **" & MMWRWeekMMWRWeek == "`W'" ;
				} ;
		* drop unneeded vars ;
			drop SORT ;
		* rename vars ;
			rename 
				(DeathPlaceOfDeathPlaceOfDeath DeathYearYear MMWRWeekMMWRWeek Deaths     )
				(place                         year_cal      week_mmwr        num_deaths ) ;
		* revise 2019 & 2020 year var values ;
			replace year_cal = "2019" if year_cal == "2019 **" ;
			replace year_cal = "2020" if year_cal == "2020 **" ;
		* destring number of deaths var & mmwr week var (to allow sorting);
			destring num_deaths, replace ;
			format num_deaths %9.0fc ;
		* inspect var values ;
			* # deaths ;
				* total ;
					tabstat num_deaths, stat(sum) format(%9.0fc) ;
				* by week ;
					gsort week_mmwr ;
					tabstat num_deaths, stat(sum) format(%9.0fc) by(week_mmwr) ;
					* drop observations w/ unknown mmwr week & where mmwr week is 99 ;
						drop if week_mmwr == "99" ;
						drop if week_mmwr == "Unknown" ;
					* destring week var for later use ;
						destring week_mmwr,  replace ;
						tabstat num_deaths, stat(sum) format(%9.0fc) by(week_mmwr) ;
				* by calendar year ;
					gsort year_cal ;
					tabstat num_deaths, stat(sum) format(%9.0fc) by(year_cal) ;
				* by place of death ;
					gsort place ;
					tabstat num_deaths, stat(sum) format(%9.0fc) by(place) ;
					drop if place == "Other" ;
					drop if place == "Unknown" ;
					tabstat num_deaths, stat(sum) format(%9.0fc) by(place) ;
		* revise place values to ease later coding ;
			replace place = "doa"           if place == "Dead on Arrival at Hospital" ;
			replace place = "home"          if place == "Decedents Home" ;
			replace place = "emer_dept_out" if place == "Emergency Room/Outpatient" ;
			replace place = "hospice"       if place == "Hospice Facility" ;
			replace place = "inpatient"     if place == "Hospital Inpatient" ;
			replace place = "nurs_home_ltc" if place == "Nursing Home/Long Term Care Facility" ;
		* save data ;
			gsort year_cal week_mmwr place ;
			tempfile deaths ;
			save "`deaths'" ;
			clear ;
	* pop data - all residents;
		* read in data ;
			import excel 
				"C:\Users\Troy\Box Sync\_ troy's files\research\_data\ohio\public health info warehouse\ohio deaths by county, year, & mmwr week (2010-2020) - v6 .xlsx" , 
				sheet("pop- st") firstrow allstring ;
		* drop total row ;
			drop if PopulationYearYear == "Total" ;
		* drop unneeded vars ;
			drop SORT ;
		* rename vars ;
			rename 
				(PopulationYearYear Count     )
				(year_cal           pop_total ) ;
		* destring pop var ;
			destring pop_total, replace ;
			format   pop_total %9.0fc ;
		* approximate 2019 & 2020 pop by using 2013-2018 compound annual growth rate ;
			replace pop_total = . if year_cal == "2019" | year_cal == "2020" ;
			gsort year_cal ;
			* create vars that equal the 2013 & 2018 values ;
				foreach Y in 2013 2018
					{ ;
					gen pop_total_`Y'_temp = pop_total if year_cal == "`Y'" ;
					egen pop_total_`Y' = mean(pop_total_`Y'_temp) ;
					} ;
			* calc compound annual growth rate 2013-2018 ;
				gen pop_cagr_2013_2018 = ( pop_total_2018 / pop_total_2013 ) ^ (1/5) - 1 ;
			* replace 2019 & 2020 values ;
				replace pop_total = ( 1 + pop_cagr_2013_2018 )   * pop_total_2018 if year == "2019" ;
				replace pop_total = ( 1 + pop_cagr_2013_2018 )^2 * pop_total_2018 if year == "2020" ;
			* drop unneeded vars ;
				drop pop_cagr_2013_2018 pop_total_* ;
		* inspect var values ;
			* pop ;
				* total ;
					tabstat pop_total, stat(sum) format(%12.0fc) ;
				* by calendar year ;
					gsort year_cal ;
					tabstat pop_total, stat(sum) format(%12.0fc) by(year_cal) ;
		* save data ;
			gsort year_cal ;
			tempfile pop_all_res ;
			save "`pop_all_res'" ;
			clear ;
	* pop data - nursing homes ;
		* read in data ;
			import excel 
				"C:\Users\Troy\Box Sync\_ troy's files\research\_data\ohio\public health info warehouse\ohio deaths by county, year, & mmwr week (2010-2020) - v6 .xlsx" , 
				sheet("pop- n homes") firstrow allstring ;
		* rename vars ;
			rename 
				(PopulationYearYear Count          )
				(year_cal           pop_nurse_home ) ;
		* destring pop var ;
			destring pop_nurse_home, replace ;
			format   pop_nurse_home %9.0fc ;
		* inspect var values ;
			* pop ;
				* total ;
					tabstat pop_nurse_home, stat(sum) format(%12.0fc) ;
				* by calendar year ;
					gsort year_cal ;
					tabstat pop_nurse_home, stat(sum) format(%12.0fc) by(year_cal) ;
		* approximate 2010 pop by using 2011-2016 compound annual growth rate ;
			* first create 2010 observation w/ blank pop value ;
				expand 2 if year == "2011" ;
				gsort year ;
				replace year = "2010" if year == "2011" & year[_n+1] == "2011" ;
				replace pop_nurse_home = . if year == "2010" ;
			* create vars that equal the 2011 & 2016 values ;
				foreach Y in 2011 2016
					{ ;
					gen pop_nh_`Y'_temp = pop_nurse_home if year_cal == "`Y'" ;
					egen pop_nh_`Y' = mean(pop_nh_`Y'_temp) ;
					} ;
			* calc compound annual growth rate 2011-2016 ;
				gen pop_cagr_2011_2016 = ( pop_nh_2016 / pop_nh_2011 ) ^ (1/5) - 1 ;
			* replace 2010 value ;
				replace pop_nurse_home = pop_nh_2011 / ( 1 + pop_cagr_2011_2016 ) if year == "2010" ;
			* drop unneeded vars ;
				drop pop_cagr_2011_2016 pop_nh_* ;
		* approximate 2020 pop by using 2014-2019 compound annual growth rate ;
			* first create 2020 observation w/ blank pop value ;
				expand 2 if year == "2019" ;
				gsort year ;
				replace year = "2020" if year == "2019" & year[_n-1] == "2019" ;
				replace pop_nurse_home = . if year == "2020" ;
			* create vars that equal the 2014 & 2019 values ;
				foreach Y in 2014 2019
					{ ;
					gen pop_nh_`Y'_temp = pop_nurse_home if year_cal == "`Y'" ;
					egen pop_nh_`Y' = mean(pop_nh_`Y'_temp) ;
					} ;
			* calc compound annual growth rate 2014-2019 ;
				gen pop_cagr_2014_2019 = ( pop_nh_2019 / pop_nh_2014 ) ^ (1/5) - 1 ;
			* replace 2020 value ;
				replace pop_nurse_home = ( 1 + pop_cagr_2014_2019 ) * pop_nh_2019 if year == "2020" ;
			* drop unneeded vars ;
				drop pop_cagr_2014_2019 pop_nh_* ;
		* save data ;
			gsort year_cal ;
			tempfile pop_nrs_hm ;
			save   "`pop_nrs_hm'" ;
			clear ;
	* pop data - hospice ;
		* read in data ;
			import excel 
				"C:\Users\Troy\Box Sync\_ troy's files\research\_data\ohio\public health info warehouse\ohio deaths by county, year, & mmwr week (2010-2020) - v6 .xlsx" , 
				sheet("pop- num svd by hospice") firstrow allstring ;
		* rename vars ;
			rename 
				(PopulationYearYear Count          )
				(year_cal           pop_hospice ) ;
		* destring pop var ;
			destring pop_hospice, replace ;
			format   pop_hospice %9.0fc ;
		* inspect var values ;
			* pop ;
				* total ;
					tabstat pop_hospice, stat(sum) format(%12.0fc) ;
				* by calendar year ;
					gsort year_cal ;
					tabstat pop_hospice, stat(sum) format(%12.0fc) by(year_cal) ;
		* approximate 2018-2020 pop by using 2012-2017 compound annual growth rate ;
			* first create 2018-2020 observations w/ blank pop value ;
				expand 4 if year == "2017" ;
				gsort year ;
				replace year = "2018" if year[_n-1] == "2017" & year[_n-2] == "2016" ;
				replace year = "2019" if year[_n-2] == "2017" & year[_n-3] == "2016" ;
				replace year = "2020" if year[_n-3] == "2017" & year[_n-4] == "2016" ;
				replace pop_hospice = . if year == "2018" | year == "2019" | year == "2020" ;
			* create vars that equal the 2012 & 2017 values ;
				foreach Y in 2012 2017
					{ ;
					gen pop_hospice_`Y'_temp = pop_hospice if year_cal == "`Y'" ;
					egen pop_hospice_`Y' = mean(pop_hospice_`Y'_temp) ;
					} ;
			* calc compound annual growth rate 2012-2017 ;
				gen pop_cagr_2012_2017 = ( pop_hospice_2017 / pop_hospice_2012 ) ^ (1/5) - 1 ;
			* replace 2018-2020 values ;
				replace pop_hospice = pop_hospice_2017 * ( 1 + pop_cagr_2012_2017 ) ^ 1 if year == "2018" ;
				replace pop_hospice = pop_hospice_2017 * ( 1 + pop_cagr_2012_2017 ) ^ 2 if year == "2019" ;
				replace pop_hospice = pop_hospice_2017 * ( 1 + pop_cagr_2012_2017 ) ^ 3 if year == "2020" ;
			* drop unneeded vars ;
				drop pop_cagr_2012_2017 pop_hospice_* ;
		* save data ;
			gsort year_cal ;
			tempfile pop_hospice ;
			save   "`pop_hospice'" ;
			clear ;
* merge datasets ;
	* open deaths dataset ;
		use   "`deaths'", clear ;
	* merge pop datasets ;
		merge m:1 year_cal using "`pop_all_res'" ;
		drop _merge ;
		merge m:1 year_cal using "`pop_nrs_hm'" ;
		drop _merge ;
		merge m:1 year_cal using "`pop_hospice'" ;
		drop _merge ;
* revise & create vars ;
	* subtract nursing home & hospice populations from the total pop ;
		replace pop_total = pop_total - ( pop_nurse_home - pop_hospice ) ;
	* revise pop var for nursing homes & hospice  ;
		replace pop_total = pop_nurse_home if place == "nurs_home_ltc" ;
		replace pop_total = pop_hospice    if place == "hospice" ;
		drop pop_nurse_home pop_hospice ;
	* epi year var & corresponding dummy vars (will use 2010 as reference year) ;
		* dummy vars ;
			gen     dum_year_epi_2009 = 0 ;
			replace dum_year_epi_2009 = 1 if year_cal == "2010" & week_mmwr <= 26 ;
			gen     dum_year_epi_2011 = 0 ;
			replace dum_year_epi_2011 = 1 if year_cal == "2011" & week_mmwr >= 27 ;
			replace dum_year_epi_2011 = 1 if year_cal == "2012" & week_mmwr <= 26 ;
			gen     dum_year_epi_2012 = 0 ;
			replace dum_year_epi_2012 = 1 if year_cal == "2012" & week_mmwr >= 27 ;
			replace dum_year_epi_2012 = 1 if year_cal == "2013" & week_mmwr <= 26 ;
			gen     dum_year_epi_2013 = 0 ;
			replace dum_year_epi_2013 = 1 if year_cal == "2013" & week_mmwr >= 27 ;
			replace dum_year_epi_2013 = 1 if year_cal == "2014" & week_mmwr <= 26 ;
			gen     dum_year_epi_2014 = 0 ;
			replace dum_year_epi_2014 = 1 if year_cal == "2014" & week_mmwr >= 27 ;
			replace dum_year_epi_2014 = 1 if year_cal == "2015" & week_mmwr <= 26 ;
			gen     dum_year_epi_2015 = 0 ;
			replace dum_year_epi_2015 = 1 if year_cal == "2015" & week_mmwr >= 27 ;
			replace dum_year_epi_2015 = 1 if year_cal == "2016" & week_mmwr <= 26 ;
			gen     dum_year_epi_2016 = 0 ;
			replace dum_year_epi_2016 = 1 if year_cal == "2016" & week_mmwr >= 27 ;
			replace dum_year_epi_2016 = 1 if year_cal == "2017" & week_mmwr <= 26 ;
			gen     dum_year_epi_2017 = 0 ;
			replace dum_year_epi_2017 = 1 if year_cal == "2017" & week_mmwr >= 27 ;
			replace dum_year_epi_2017 = 1 if year_cal == "2018" & week_mmwr <= 26 ;
			gen     dum_year_epi_2018 = 0 ;
			replace dum_year_epi_2018 = 1 if year_cal == "2018" & week_mmwr >= 27 ;
			replace dum_year_epi_2018 = 1 if year_cal == "2019" & week_mmwr <= 26 ;
			gen     dum_year_epi_2019 = 0 ;
			replace dum_year_epi_2019 = 1 if year_cal == "2019" & week_mmwr >= 27 ;
			replace dum_year_epi_2019 = 1 if year_cal == "2020" & week_mmwr <= 26 ;
		* var ;
			gen year_epi = "" ;
			replace year_epi = "2009" if dum_year_epi_2009 == 1 ; 
			replace year_epi = "2010" if year_cal == "2010" & week_mmwr >= 27 ;
			replace year_epi = "2010" if year_cal == "2011" & week_mmwr <= 26 ;
			foreach Y of numlist 11/19
				{ ;
				replace year_epi = "20`Y'" if dum_year_epi_20`Y' == 1 ; 
				} ;
	* mmwr week dummy vars (week 1 is reference week) ;
		foreach W of numlist 2(1)53 
			{ ;
			gen     dum_week_mmwr_`W' = 0 ;
			replace dum_week_mmwr_`W' = 1 if week_mmwr == `W' ;
			} ;
	* fourier terms ;
		gen fourier_theta = 2 * c(pi) * week_mmwr / 52.1775 ;
		gen fourier_sin_theta  = sin(fourier_theta) ;
		gen fourier_cos_theta  = cos(fourier_theta) ;		
		gen fourier_sin_2theta = sin(2 * fourier_theta) ;
		gen fourier_cos_2theta = cos(2 * fourier_theta) ;		
		drop fourier_theta ;
* save complete dataset ;
	gsort year_cal week_mmwr place ;
	save "C:\Users\Troy\Box Sync\_ troy's files\research\covid-19\2020-05 - ohio analysis\stata work\covid-19 ohio state all causes by place analysis - sample data - v13 .dta", replace ;
log close ;
end ;
